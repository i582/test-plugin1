// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: tact.flex

package org.tonstudio.tact.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static org.tonstudio.tact.lang.psi.TactTokenTypes.*;
import static org.tonstudio.tact.lang.psi.TactDocElementTypes.*;


public class _TactLexer implements FlexLexer, TactTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int MULTI_LINE_COMMENT_STATE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\2\0\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\6\24\2\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\6\35\10\36\1\37\1\40\4\36\1\41\2\36"+
    "\1\42\2\36\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\2\36\1\62\1\63\1\64\1\65\1\66\1\36"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\36\1\77\1\100\1\101\1\102\6\0\1\3\44\0"+
    "\1\36\12\0\1\36\4\0\1\36\5\0\27\36\1\0"+
    "\37\36\1\0\u01ca\36\4\0\14\36\16\0\5\36\7\0"+
    "\1\36\1\0\1\36\201\0\5\36\1\0\2\36\2\0"+
    "\4\36\1\0\1\36\6\0\1\36\1\0\3\36\1\0"+
    "\1\36\1\0\24\36\1\0\123\36\1\0\213\36\10\0"+
    "\246\36\1\0\46\36\2\0\1\36\6\0\51\36\107\0"+
    "\33\36\4\0\4\36\55\0\53\36\25\0\12\103\4\0"+
    "\2\36\1\0\143\36\1\0\1\36\17\0\2\36\7\0"+
    "\2\36\12\103\3\36\2\0\1\36\20\0\1\36\1\0"+
    "\36\36\35\0\131\36\13\0\1\36\16\0\12\103\41\36"+
    "\11\0\2\36\4\0\1\36\5\0\26\36\4\0\1\36"+
    "\11\0\1\36\3\0\1\36\27\0\31\36\7\0\13\36"+
    "\65\0\25\36\1\0\10\36\106\0\66\36\3\0\1\36"+
    "\22\0\1\36\7\0\12\36\4\0\12\103\1\0\20\36"+
    "\4\0\10\36\2\0\2\36\2\0\26\36\1\0\7\36"+
    "\1\0\1\36\3\0\4\36\3\0\1\36\20\0\1\36"+
    "\15\0\2\36\1\0\3\36\4\0\12\103\2\36\12\0"+
    "\1\36\10\0\6\36\4\0\2\36\2\0\26\36\1\0"+
    "\7\36\1\0\2\36\1\0\2\36\1\0\2\36\37\0"+
    "\4\36\1\0\1\36\7\0\12\103\2\0\3\36\20\0"+
    "\11\36\1\0\3\36\1\0\26\36\1\0\7\36\1\0"+
    "\2\36\1\0\5\36\3\0\1\36\22\0\1\36\17\0"+
    "\2\36\4\0\12\103\11\0\1\36\13\0\10\36\2\0"+
    "\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0"+
    "\5\36\3\0\1\36\36\0\2\36\1\0\3\36\4\0"+
    "\12\103\1\0\1\36\21\0\1\36\1\0\6\36\3\0"+
    "\3\36\1\0\4\36\3\0\2\36\1\0\1\36\1\0"+
    "\2\36\3\0\2\36\3\0\3\36\3\0\14\36\26\0"+
    "\1\36\25\0\12\103\25\0\10\36\1\0\3\36\1\0"+
    "\27\36\1\0\20\36\3\0\1\36\32\0\3\36\5\0"+
    "\2\36\4\0\12\103\20\0\1\36\4\0\10\36\1\0"+
    "\3\36\1\0\27\36\1\0\12\36\1\0\5\36\3\0"+
    "\1\36\40\0\1\36\1\0\2\36\4\0\12\103\1\0"+
    "\2\36\22\0\10\36\1\0\3\36\1\0\51\36\2\0"+
    "\1\36\20\0\1\36\5\0\3\36\10\0\3\36\4\0"+
    "\12\103\12\0\6\36\5\0\22\36\3\0\30\36\1\0"+
    "\11\36\1\0\1\36\2\0\7\36\37\0\12\103\21\0"+
    "\60\36\1\0\2\36\14\0\7\36\11\0\12\103\47\0"+
    "\2\36\1\0\1\36\1\0\5\36\1\0\30\36\1\0"+
    "\1\36\1\0\12\36\1\0\2\36\11\0\1\36\2\0"+
    "\5\36\1\0\1\36\11\0\12\103\2\0\4\36\40\0"+
    "\1\36\37\0\12\103\26\0\10\36\1\0\44\36\33\0"+
    "\5\36\163\0\53\36\24\0\1\36\12\103\6\0\6\36"+
    "\4\0\4\36\3\0\1\36\3\0\2\36\7\0\3\36"+
    "\4\0\15\36\14\0\1\36\1\0\12\103\6\0\46\36"+
    "\1\0\1\36\5\0\1\36\2\0\53\36\1\0\115\36"+
    "\1\0\4\36\2\0\7\36\1\0\1\36\1\0\4\36"+
    "\2\0\51\36\1\0\4\36\2\0\41\36\1\0\4\36"+
    "\2\0\7\36\1\0\1\36\1\0\4\36\2\0\17\36"+
    "\1\0\71\36\1\0\4\36\2\0\103\36\45\0\20\36"+
    "\20\0\126\36\2\0\6\36\3\0\u016c\36\2\0\21\36"+
    "\1\0\32\36\5\0\113\36\6\0\10\36\7\0\15\36"+
    "\1\0\4\36\16\0\22\36\16\0\22\36\16\0\15\36"+
    "\1\0\3\36\17\0\64\36\43\0\1\36\4\0\1\36"+
    "\3\0\12\103\46\0\12\103\6\0\131\36\7\0\5\36"+
    "\2\0\42\36\1\0\1\36\5\0\106\36\12\0\37\36"+
    "\47\0\12\103\36\36\2\0\5\36\13\0\54\36\4\0"+
    "\32\36\6\0\12\103\46\0\27\36\11\0\65\36\53\0"+
    "\12\103\6\0\12\103\15\0\1\36\135\0\57\36\21\0"+
    "\7\36\4\0\12\103\51\0\36\36\15\0\2\36\12\103"+
    "\54\36\32\0\44\36\34\0\12\103\3\0\3\36\12\103"+
    "\44\36\2\0\11\36\7\0\53\36\2\0\3\36\51\0"+
    "\4\36\1\0\6\36\1\0\2\36\3\0\1\36\5\0"+
    "\300\36\100\0\26\36\2\0\6\36\2\0\46\36\2\0"+
    "\6\36\2\0\10\36\1\0\1\36\1\0\1\36\1\0"+
    "\1\36\1\0\37\36\2\0\65\36\1\0\7\36\1\0"+
    "\1\36\3\0\3\36\1\0\7\36\3\0\4\36\2\0"+
    "\6\36\4\0\15\36\5\0\3\36\1\0\7\36\53\0"+
    "\2\3\107\0\1\36\15\0\1\36\20\0\15\36\145\0"+
    "\1\36\4\0\1\36\2\0\12\36\1\0\1\36\3\0"+
    "\5\36\6\0\1\36\1\0\1\36\1\0\1\36\1\0"+
    "\4\36\1\0\13\36\2\0\4\36\5\0\5\36\4\0"+
    "\1\36\64\0\2\36\u017b\0\57\36\1\0\57\36\1\0"+
    "\205\36\6\0\4\36\3\0\2\36\14\0\46\36\1\0"+
    "\1\36\5\0\1\36\2\0\70\36\7\0\1\36\20\0"+
    "\27\36\11\0\7\36\1\0\7\36\1\0\7\36\1\0"+
    "\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0"+
    "\7\36\120\0\1\36\325\0\2\36\52\0\5\36\5\0"+
    "\2\36\4\0\126\36\6\0\3\36\1\0\132\36\1\0"+
    "\4\36\5\0\53\36\1\0\136\36\21\0\33\36\65\0"+
    "\306\36\112\0\360\36\20\0\215\36\103\0\56\36\2\0"+
    "\15\36\3\0\20\36\12\103\2\36\24\0\57\36\20\0"+
    "\37\36\2\0\106\36\61\0\11\36\2\0\147\36\2\0"+
    "\65\36\2\0\5\36\60\0\13\36\1\0\3\36\1\0"+
    "\4\36\1\0\27\36\35\0\64\36\16\0\62\36\34\0"+
    "\12\103\30\0\6\36\3\0\1\36\1\0\2\36\1\0"+
    "\12\103\34\36\12\0\27\36\31\0\35\36\7\0\57\36"+
    "\34\0\1\36\12\103\6\0\5\36\1\0\12\36\12\103"+
    "\5\36\1\0\51\36\27\0\3\36\1\0\10\36\4\0"+
    "\12\103\6\0\27\36\3\0\1\36\3\0\62\36\1\0"+
    "\1\36\3\0\2\36\2\0\5\36\2\0\1\36\1\0"+
    "\1\36\30\0\3\36\2\0\13\36\7\0\3\36\14\0"+
    "\6\36\2\0\6\36\2\0\6\36\11\0\7\36\1\0"+
    "\7\36\1\0\53\36\1\0\14\36\10\0\163\36\15\0"+
    "\12\103\6\0\244\36\14\0\27\36\4\0\61\36\4\0"+
    "\u0100\3\156\36\2\0\152\36\46\0\7\36\14\0\5\36"+
    "\5\0\1\36\1\0\12\36\1\0\15\36\1\0\5\36"+
    "\1\0\1\36\1\0\2\36\1\0\2\36\1\0\154\36"+
    "\41\0\153\36\22\0\100\36\2\0\66\36\50\0\14\36"+
    "\164\0\5\36\1\0\207\36\23\0\12\103\7\0\32\36"+
    "\6\0\32\36\13\0\131\36\3\0\6\36\2\0\6\36"+
    "\2\0\6\36\2\0\3\36\43\0\14\36\1\0\32\36"+
    "\1\0\23\36\1\0\2\36\1\0\17\36\2\0\16\36"+
    "\42\0\173\36\205\0\35\36\3\0\61\36\57\0\40\36"+
    "\15\0\24\36\1\0\10\36\6\0\46\36\12\0\36\36"+
    "\2\0\44\36\4\0\10\36\60\0\236\36\2\0\12\103"+
    "\6\0\44\36\4\0\44\36\4\0\50\36\10\0\64\36"+
    "\234\0\67\36\11\0\26\36\12\0\10\36\230\0\6\36"+
    "\2\0\1\36\1\0\54\36\1\0\2\36\3\0\1\36"+
    "\2\0\27\36\12\0\27\36\11\0\37\36\101\0\23\36"+
    "\1\0\2\36\12\0\26\36\12\0\32\36\106\0\70\36"+
    "\6\0\2\36\100\0\1\36\17\0\4\36\1\0\3\36"+
    "\1\0\35\36\52\0\35\36\3\0\35\36\43\0\10\36"+
    "\1\0\34\36\33\0\66\36\12\0\26\36\12\0\23\36"+
    "\15\0\22\36\156\0\111\36\67\0\63\36\15\0\63\36"+
    "\15\0\44\36\14\0\12\103\306\0\35\36\12\0\1\36"+
    "\10\0\26\36\232\0\27\36\14\0\65\36\56\0\12\103"+
    "\23\0\55\36\40\0\31\36\7\0\12\103\11\0\44\36"+
    "\17\0\12\103\4\0\1\36\13\0\43\36\3\0\1\36"+
    "\14\0\60\36\16\0\4\36\13\0\12\103\1\36\1\0"+
    "\1\36\43\0\22\36\1\0\31\36\124\0\7\36\1\0"+
    "\1\36\1\0\4\36\1\0\17\36\1\0\12\36\7\0"+
    "\57\36\21\0\12\103\13\0\10\36\2\0\2\36\2\0"+
    "\26\36\1\0\7\36\1\0\2\36\1\0\5\36\3\0"+
    "\1\36\22\0\1\36\14\0\5\36\236\0\65\36\22\0"+
    "\4\36\5\0\12\103\5\0\1\36\40\0\60\36\24\0"+
    "\2\36\1\0\1\36\10\0\12\103\246\0\57\36\51\0"+
    "\4\36\44\0\60\36\24\0\1\36\13\0\12\103\46\0"+
    "\53\36\15\0\1\36\7\0\12\103\66\0\33\36\25\0"+
    "\12\103\306\0\54\36\164\0\100\36\12\103\25\0\1\36"+
    "\240\0\10\36\2\0\47\36\20\0\1\36\1\0\1\36"+
    "\34\0\1\36\12\0\50\36\7\0\1\36\25\0\1\36"+
    "\13\0\56\36\23\0\1\36\42\0\71\36\7\0\11\36"+
    "\1\0\45\36\21\0\1\36\17\0\12\103\30\0\36\36"+
    "\160\0\7\36\1\0\2\36\1\0\46\36\25\0\1\36"+
    "\11\0\12\103\6\0\6\36\1\0\2\36\1\0\40\36"+
    "\16\0\1\36\7\0\12\103\u0136\0\23\36\15\0\232\36"+
    "\346\0\304\36\274\0\57\36\321\0\107\36\271\0\71\36"+
    "\7\0\37\36\1\0\12\103\146\0\36\36\22\0\60\36"+
    "\20\0\4\36\14\0\12\103\11\0\25\36\5\0\23\36"+
    "\260\0\100\36\200\0\113\36\5\0\1\36\102\0\15\36"+
    "\100\0\2\36\1\0\1\36\34\0\370\36\10\0\363\36"+
    "\15\0\37\36\61\0\3\36\21\0\4\36\10\0\u018c\36"+
    "\4\0\153\36\5\0\15\36\3\0\11\36\7\0\12\36"+
    "\146\0\125\36\1\0\107\36\1\0\2\36\2\0\1\36"+
    "\2\0\2\36\2\0\4\36\1\0\14\36\1\0\1\36"+
    "\1\0\7\36\1\0\101\36\1\0\4\36\2\0\10\36"+
    "\1\0\7\36\1\0\34\36\1\0\4\36\1\0\5\36"+
    "\1\0\1\36\3\0\7\36\1\0\u0154\36\2\0\31\36"+
    "\1\0\31\36\1\0\37\36\1\0\31\36\1\0\37\36"+
    "\1\0\31\36\1\0\37\36\1\0\31\36\1\0\37\36"+
    "\1\0\31\36\1\0\10\36\2\0\62\103\55\36\12\0"+
    "\7\36\2\0\12\103\4\0\1\36\u0171\0\54\36\4\0"+
    "\12\103\6\0\305\36\73\0\104\36\7\0\1\36\4\0"+
    "\12\103\246\0\4\36\1\0\33\36\1\0\2\36\1\0"+
    "\1\36\2\0\1\36\1\0\12\36\1\0\4\36\1\0"+
    "\1\36\1\0\1\36\6\0\1\36\4\0\1\36\1\0"+
    "\1\36\1\0\1\36\1\0\3\36\1\0\2\36\1\0"+
    "\1\36\2\0\1\36\1\0\1\36\1\0\1\36\1\0"+
    "\1\36\1\0\1\36\1\0\2\36\1\0\1\36\2\0"+
    "\4\36\1\0\7\36\1\0\4\36\1\0\4\36\1\0"+
    "\1\36\1\0\12\36\1\0\21\36\5\0\3\36\1\0"+
    "\5\36\1\0\21\36\104\0\327\36\51\0\65\36\13\0"+
    "\336\36\2\0\u0182\36\16\0\u0131\36\37\0\36\36\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\1\22\30\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\0\3\42\2\0\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\4\0\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\0\1\30\1\70"+
    "\1\0\2\30\1\71\5\30\1\72\1\30\1\73\20\30"+
    "\1\74\1\75\4\76\1\77\1\100\1\60\1\101\1\0"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\4\0"+
    "\7\30\1\111\1\112\3\30\1\113\1\114\14\30\1\115"+
    "\5\30\3\0\1\116\1\103\3\0\1\117\4\0\5\30"+
    "\1\120\11\30\1\121\7\30\1\122\1\123\3\30\1\124"+
    "\1\0\2\103\1\125\2\0\1\125\1\30\1\126\1\30"+
    "\1\127\3\30\1\130\15\30\1\131\1\132\1\30\1\133"+
    "\2\0\1\125\3\0\1\30\1\134\4\30\1\135\1\136"+
    "\1\137\2\30\1\140\3\30\1\141\1\142\1\143\1\30"+
    "\1\0\1\125\1\0\2\30\1\144\1\30\1\145\1\146"+
    "\1\147\2\30\1\150\1\151\2\0\1\152\1\153\1\154"+
    "\1\155\1\30\2\125\1\156\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\314"+
    "\0\u01dc\0\u0220\0\314\0\314\0\u0264\0\u02a8\0\314\0\u02ec"+
    "\0\314\0\u0330\0\u0374\0\u03b8\0\314\0\314\0\u03fc\0\u0440"+
    "\0\u0484\0\314\0\314\0\u04c8\0\314\0\314\0\u050c\0\u0550"+
    "\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\u0a18\0\314\0\u0a5c\0\314\0\314\0\u0aa0\0\314"+
    "\0\u0ae4\0\314\0\u0b28\0\u0b6c\0\u0110\0\u0bb0\0\314\0\314"+
    "\0\314\0\314\0\314\0\u0bf4\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\u0c38\0\u0c7c\0\314\0\u0cc0\0\u03b8\0\u0d04"+
    "\0\u0d48\0\u0d8c\0\314\0\314\0\314\0\u0dd0\0\314\0\u0e14"+
    "\0\u0e58\0\u04c8\0\u0550\0\u0e9c\0\u0ee0\0\u04c8\0\u0f24\0\u0f68"+
    "\0\u0fac\0\u0ff0\0\u1034\0\u04c8\0\u1078\0\u10bc\0\u1100\0\u1144"+
    "\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364"+
    "\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\314\0\314"+
    "\0\314\0\u1540\0\u1584\0\u15c8\0\314\0\314\0\u160c\0\314"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\314\0\314\0\u17a4"+
    "\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u04c8\0\u1b18\0\u1b5c\0\u1ba0"+
    "\0\u04c8\0\u04c8\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38"+
    "\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u04c8\0\u1f14"+
    "\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\314"+
    "\0\u2134\0\u2178\0\u171c\0\u1760\0\314\0\u21bc\0\u2200\0\u2244"+
    "\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u04c8\0\u2420"+
    "\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640"+
    "\0\u04c8\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c"+
    "\0\u04c8\0\u04c8\0\u2860\0\u28a4\0\u28e8\0\u04c8\0\u15c8\0\u292c"+
    "\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u04c8\0\u2b08"+
    "\0\u04c8\0\u2b4c\0\u2b90\0\u2bd4\0\u04c8\0\u2c18\0\u2c5c\0\u2ca0"+
    "\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0"+
    "\0\u2f04\0\u2f48\0\u04c8\0\u04c8\0\u2f8c\0\u04c8\0\u2970\0\u2fd0"+
    "\0\314\0\u3014\0\u3058\0\u309c\0\u30e0\0\u04c8\0\u3124\0\u3168"+
    "\0\u31ac\0\u31f0\0\u04c8\0\u04c8\0\u04c8\0\u3234\0\u3278\0\u04c8"+
    "\0\u32bc\0\u3300\0\u3344\0\u04c8\0\u04c8\0\u04c8\0\u3388\0\u33cc"+
    "\0\u3410\0\u3454\0\u3498\0\u34dc\0\u04c8\0\u3520\0\u04c8\0\u04c8"+
    "\0\u04c8\0\u3564\0\u35a8\0\u04c8\0\u04c8\0\u35ec\0\u3630\0\u04c8"+
    "\0\u04c8\0\u04c8\0\u04c8\0\u3674\0\u36b8\0\u36fc\0\u04c8\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\5\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\3\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\6\34\1\35\1\4\1\36\1\37"+
    "\1\34\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\2\34\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\2\34\1\63\1\64"+
    "\1\65\1\66\1\4\7\67\1\70\34\67\1\71\37\67"+
    "\14\72\1\73\4\72\1\74\62\72\105\0\1\75\2\0"+
    "\1\75\14\0\1\76\64\0\1\6\107\0\1\77\22\0"+
    "\1\100\103\0\1\101\63\0\1\102\17\0\1\103\14\0"+
    "\1\104\66\0\1\105\67\0\1\106\13\0\1\107\71\0"+
    "\1\110\11\0\1\111\1\112\65\0\1\113\4\0\1\114"+
    "\7\0\1\115\74\0\4\24\14\0\1\116\4\0\1\117"+
    "\2\0\1\120\12\0\1\121\7\0\1\116\30\0\4\24"+
    "\21\0\1\117\64\0\1\122\1\123\103\0\1\124\103\0"+
    "\1\125\1\126\73\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\26\34\4\0\1\34\31\0\1\127\116\0\1\130"+
    "\61\0\4\34\7\0\6\34\4\0\1\34\1\0\1\34"+
    "\1\131\15\34\1\132\6\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\133\26\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\1\134"+
    "\13\34\1\135\11\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\14\34\1\136\11\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\11\34\1\137\12\34\1\140\1\34\4\0\1\34\22\0"+
    "\4\34\7\0\6\34\4\0\1\34\1\0\1\141\13\34"+
    "\1\142\4\34\1\143\4\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\5\34\1\144\4\34"+
    "\1\145\1\146\12\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\4\34\1\147\21\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\1\150\3\34\1\151\14\34\1\152\4\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\1\153"+
    "\20\34\1\154\4\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\22\34\1\155\3\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\16\34\1\156\7\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\4\34\1\157\21\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\20\34\1\160\5\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\16\34\1\161\6\34\1\162"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\13\34\1\163\12\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\10\34\1\164\15\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\7\34\1\165\1\166\15\34\4\0\1\34\31\0"+
    "\1\167\46\0\1\170\3\0\7\67\1\0\34\67\1\0"+
    "\37\67\2\171\4\0\14\171\3\172\45\171\1\173\2\171"+
    "\1\174\6\171\21\0\1\175\76\0\1\176\110\0\1\177"+
    "\113\0\1\200\66\0\1\201\67\0\2\114\1\75\2\202"+
    "\1\0\76\114\22\0\4\203\7\0\1\203\13\0\6\203"+
    "\47\0\2\204\102\0\3\205\110\0\1\206\103\0\1\207"+
    "\1\210\73\0\3\211\14\0\1\212\30\0\1\213\2\0"+
    "\1\214\30\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\17\34\1\215\6\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\20\34\1\216\5\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\3\34\1\217\7\34\1\220\12\34\4\0\1\34\22\0"+
    "\4\34\7\0\6\34\4\0\1\34\1\0\17\34\1\221"+
    "\6\34\4\0\1\34\22\0\4\34\7\0\6\34\4\0"+
    "\1\34\1\0\20\34\1\222\5\34\4\0\1\34\22\0"+
    "\4\34\7\0\6\34\4\0\1\34\1\0\11\34\1\223"+
    "\14\34\4\0\1\34\22\0\4\34\7\0\6\34\4\0"+
    "\1\34\1\0\16\34\1\224\7\34\4\0\1\34\22\0"+
    "\4\34\7\0\6\34\4\0\1\34\1\0\13\34\1\225"+
    "\12\34\4\0\1\34\22\0\4\34\7\0\6\34\4\0"+
    "\1\34\1\0\15\34\1\226\10\34\4\0\1\34\22\0"+
    "\4\34\7\0\6\34\4\0\1\34\1\0\10\34\1\227"+
    "\1\230\14\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\20\34\1\231\5\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\15\34"+
    "\1\232\10\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\17\34\1\233\6\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\20\34"+
    "\1\234\5\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\20\34\1\235\5\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\11\34"+
    "\1\236\14\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\4\34\1\237\21\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\10\34"+
    "\1\240\15\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\2\34\1\241\12\34\1\242\2\34"+
    "\1\243\5\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\16\34\1\244\7\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\1\245"+
    "\20\34\1\246\3\34\1\247\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\15\34\1\250\10\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\20\34\1\251\5\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\16\34\1\252\7\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\10\34\1\253\15\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\20\34\1\254\5\34"+
    "\4\0\1\34\22\0\3\255\101\0\4\256\7\0\1\256"+
    "\13\0\6\256\47\0\4\257\7\0\1\257\13\0\6\257"+
    "\25\0\2\177\1\75\3\0\76\177\14\0\1\201\4\0"+
    "\1\260\62\0\2\202\1\0\2\202\1\0\76\202\22\0"+
    "\4\203\7\0\1\203\2\0\1\261\6\0\1\262\1\0"+
    "\6\203\7\0\1\261\37\0\2\204\23\0\1\263\56\0"+
    "\3\205\22\0\1\264\65\0\1\265\74\0\3\266\101\0"+
    "\4\267\7\0\1\267\13\0\6\267\47\0\4\270\7\0"+
    "\1\270\13\0\6\270\47\0\4\271\7\0\1\271\13\0"+
    "\6\271\47\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\20\34\1\272\5\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\2\34\1\273\23\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\4\34\1\274\21\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\17\34\1\275\1\276\5\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\4\34\1\277\21\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\4\34\1\300\21\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\17\34\1\301\6\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\4\34\1\302\21\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\14\34\1\303\11\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\20\34\1\304\5\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\10\34\1\305\15\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\17\34\1\306\6\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\1\307\25\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\10\34\1\310\15\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\11\34\1\311\14\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\16\34\1\312\7\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\12\34\1\313\13\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\4\34\1\314\21\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\4\34\1\315\21\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\21\34\1\316\4\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\21\34\1\317\4\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\10\34\1\320\15\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\4\34\1\321\21\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\4\34\1\322\21\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\10\34\1\323\15\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\20\34\1\324\5\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\11\34\1\325\14\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\7\34\1\326\16\34\4\0"+
    "\1\34\22\0\3\171\101\0\4\327\7\0\1\327\13\0"+
    "\6\327\47\0\4\171\7\0\1\171\13\0\6\171\42\0"+
    "\1\330\1\0\1\330\2\0\4\331\100\0\4\203\7\0"+
    "\1\203\11\0\1\262\1\0\6\203\47\0\3\332\101\0"+
    "\4\333\7\0\1\333\13\0\6\333\47\0\4\334\7\0"+
    "\1\334\13\0\6\334\47\0\4\335\7\0\1\335\13\0"+
    "\6\335\47\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\16\34\1\336\7\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\7\34\1\337\16\34\4\0"+
    "\1\34\22\0\4\34\7\0\2\34\1\340\3\34\4\0"+
    "\1\34\1\0\26\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\20\34\1\341\5\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\16\34\1\342\7\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\13\34\1\343\2\34\1\344"+
    "\7\34\4\0\1\34\22\0\4\34\7\0\6\34\4\0"+
    "\1\34\1\0\4\34\1\345\21\34\4\0\1\34\22\0"+
    "\4\34\7\0\6\34\4\0\1\34\1\0\1\346\25\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\16\34\1\347\7\34\4\0\1\34\22\0\4\34"+
    "\7\0\2\34\1\350\3\34\4\0\1\34\1\0\26\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\13\34\1\351\12\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\1\352\25\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\20\34\1\353\5\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\22\34\1\354\3\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\16\34\1\355\7\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\10\34\1\356\15\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\10\34\1\357\15\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\1\360\25\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\16\34"+
    "\1\361\7\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\2\34\1\362\23\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\20\34"+
    "\1\363\5\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\11\34\1\364\14\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\21\34"+
    "\1\365\4\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\4\34\1\366\21\34\4\0\1\34"+
    "\22\0\4\331\100\0\4\331\21\0\1\367\100\0\1\370"+
    "\3\0\1\371\55\0\4\372\7\0\1\372\13\0\6\372"+
    "\47\0\4\373\7\0\1\373\13\0\6\373\71\0\1\374"+
    "\3\0\1\371\55\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\1\375\25\34\4\0\1\34\22\0\4\34\7\0"+
    "\6\34\4\0\1\34\1\0\5\34\1\376\20\34\4\0"+
    "\1\34\22\0\4\34\7\0\6\34\4\0\1\34\1\0"+
    "\1\377\25\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\3\34\1\u0100\22\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\13\34"+
    "\1\u0101\12\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\2\34\1\u0102\23\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\20\34"+
    "\1\u0103\5\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\5\34\1\u0104\20\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\4\34"+
    "\1\u0105\21\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\6\34\1\u0106\17\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\4\34"+
    "\1\u0107\21\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\4\34\1\u0108\21\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\10\34"+
    "\1\u0109\15\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\20\34\1\u010a\5\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\22\34"+
    "\1\u010b\3\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\20\34\1\u010c\5\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\13\34"+
    "\1\u010d\12\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\20\34\1\u010e\5\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\1\u010f"+
    "\25\34\4\0\1\34\22\0\3\u0110\101\0\4\213\7\0"+
    "\1\213\13\0\6\213\47\0\4\u0111\7\0\1\u0111\13\0"+
    "\6\u0111\122\0\1\u0112\30\0\4\34\7\0\6\34\4\0"+
    "\1\34\1\0\2\34\1\u0113\23\34\4\0\1\34\22\0"+
    "\4\34\7\0\6\34\4\0\1\34\1\0\2\34\1\u0114"+
    "\23\34\4\0\1\34\22\0\4\34\7\0\6\34\4\0"+
    "\1\34\1\0\17\34\1\u0115\6\34\4\0\1\34\22\0"+
    "\4\34\7\0\6\34\4\0\1\34\1\0\1\u0116\25\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\7\34\1\u0117\16\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\4\34\1\u0118\21\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\17\34\1\u0119\6\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\3\34\1\u011a\22\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\10\34\1\u011b\15\34\4\0\1\34\22\0\4\34"+
    "\7\0\6\34\4\0\1\34\1\0\4\34\1\u011c\21\34"+
    "\4\0\1\34\22\0\4\34\7\0\6\34\4\0\1\34"+
    "\1\0\11\34\1\u011d\14\34\4\0\1\34\22\0\3\u011e"+
    "\127\0\1\371\55\0\4\u011f\7\0\1\u011f\13\0\6\u011f"+
    "\47\0\4\34\7\0\6\34\4\0\1\34\1\0\20\34"+
    "\1\u0120\5\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\20\34\1\u0121\5\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\11\34"+
    "\1\u0122\14\34\4\0\1\34\22\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\4\34\1\u0123\21\34\4\0\1\34"+
    "\22\0\4\34\7\0\6\34\4\0\1\34\1\0\22\34"+
    "\1\u0124\3\34\4\0\1\34\22\0\3\u0125\101\0\4\u0126"+
    "\7\0\1\u0126\13\0\6\u0126\47\0\4\34\7\0\6\34"+
    "\4\0\1\34\1\0\4\34\1\u0127\21\34\4\0\1\34"+
    "\44\0\1\u0128\3\0\1\371\77\0\1\u0129\3\0\1\371"+
    "\55\0\3\u012a\154\0\1\334\30\0\3\u012b\101\0\3\u0111"+
    "\57\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14416];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\1\11\2\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\1\2\11\3\1\2\11\1\1\2\11"+
    "\24\1\1\11\1\1\2\11\1\1\1\11\1\0\1\11"+
    "\2\1\2\0\5\11\1\1\6\11\2\1\1\11\4\0"+
    "\1\1\3\11\1\1\1\11\1\0\2\1\1\0\33\1"+
    "\3\11\3\1\2\11\1\1\1\11\1\0\4\1\2\11"+
    "\1\1\4\0\40\1\3\0\1\11\1\1\3\0\1\11"+
    "\4\0\35\1\1\0\3\1\2\0\32\1\2\0\1\11"+
    "\3\0\23\1\1\0\1\1\1\0\13\1\2\0\10\1"+
    "\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int lBraceCount;
    final int state;

    public State(int state, int lBraceCount) {
        this.state = state;
        this.lBraceCount = lBraceCount;
    }

    @Override
    public String toString() {
        return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
    }
  }

  private final Stack<State> states = new Stack<State>();
  private int lBraceCount;

  private int commentStart;
  private int commentDepth;

  private void pushState(int state) {
    states.push(new State(yystate(), lBraceCount));
    lBraceCount = 0;
    yybegin(state);
  }

  private void popState() {
    State state = states.pop();
    lBraceCount = state.lBraceCount;
    yybegin(state.state);
  }

  public _TactLexer() {
    this((java.io.Reader)null);
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TactLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case MULTI_LINE_COMMENT_STATE: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return MULTI_LINE_COMMENT;
            }  // fall though
            case 300: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 111: break;
          case 2:
            { return WS;
            }
          // fall through
          case 112: break;
          case 3:
            { return NLS;
            }
          // fall through
          case 113: break;
          case 4:
            { return NOT;
            }
          // fall through
          case 114: break;
          case 5:
            { pushState(STRING); return OPEN_QUOTE;
            }
          // fall through
          case 115: break;
          case 6:
            { return REMAINDER;
            }
          // fall through
          case 116: break;
          case 7:
            { return BIT_AND;
            }
          // fall through
          case 117: break;
          case 8:
            { return LPAREN;
            }
          // fall through
          case 118: break;
          case 9:
            { return RPAREN;
            }
          // fall through
          case 119: break;
          case 10:
            { return MUL;
            }
          // fall through
          case 120: break;
          case 11:
            { return PLUS;
            }
          // fall through
          case 121: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 122: break;
          case 13:
            { return MINUS;
            }
          // fall through
          case 123: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 124: break;
          case 15:
            { return QUOTIENT;
            }
          // fall through
          case 125: break;
          case 16:
            { return INT;
            }
          // fall through
          case 126: break;
          case 17:
            { return COLON;
            }
          // fall through
          case 127: break;
          case 18:
            { return SEMICOLON;
            }
          // fall through
          case 128: break;
          case 19:
            { return LESS;
            }
          // fall through
          case 129: break;
          case 20:
            { return ASSIGN;
            }
          // fall through
          case 130: break;
          case 21:
            { return GREATER;
            }
          // fall through
          case 131: break;
          case 22:
            { return QUESTION;
            }
          // fall through
          case 132: break;
          case 23:
            { return AT;
            }
          // fall through
          case 133: break;
          case 24:
            { return IDENTIFIER;
            }
          // fall through
          case 134: break;
          case 25:
            { return LBRACK;
            }
          // fall through
          case 135: break;
          case 26:
            { return RBRACK;
            }
          // fall through
          case 136: break;
          case 27:
            { return BIT_XOR;
            }
          // fall through
          case 137: break;
          case 28:
            { return LBRACE;
            }
          // fall through
          case 138: break;
          case 29:
            { return BIT_OR;
            }
          // fall through
          case 139: break;
          case 30:
            { return RBRACE;
            }
          // fall through
          case 140: break;
          case 31:
            { return BIT_NOT;
            }
          // fall through
          case 141: break;
          case 32:
            { return STRING_ENTRY;
            }
          // fall through
          case 142: break;
          case 33:
            { popState(); return CLOSING_QUOTE;
            }
          // fall through
          case 143: break;
          case 34:
            { 
            }
          // fall through
          case 144: break;
          case 35:
            { return ASSERT_OP;
            }
          // fall through
          case 145: break;
          case 36:
            { return NOT_EQ;
            }
          // fall through
          case 146: break;
          case 37:
            { return REMAINDER_ASSIGN;
            }
          // fall through
          case 147: break;
          case 38:
            { return COND_AND;
            }
          // fall through
          case 148: break;
          case 39:
            { return BIT_AND_ASSIGN;
            }
          // fall through
          case 149: break;
          case 40:
            { return BIT_CLEAR;
            }
          // fall through
          case 150: break;
          case 41:
            { return MUL_ASSIGN;
            }
          // fall through
          case 151: break;
          case 42:
            { return PLUS_PLUS;
            }
          // fall through
          case 152: break;
          case 43:
            { return PLUS_ASSIGN;
            }
          // fall through
          case 153: break;
          case 44:
            { return MINUS_MINUS;
            }
          // fall through
          case 154: break;
          case 45:
            { return MINUS_ASSIGN;
            }
          // fall through
          case 155: break;
          case 46:
            { return ARROW;
            }
          // fall through
          case 156: break;
          case 47:
            { pushState(MULTI_LINE_COMMENT_STATE);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          // fall through
          case 157: break;
          case 48:
            { return DOC_COMMENT;
            }
          // fall through
          case 158: break;
          case 49:
            { return QUOTIENT_ASSIGN;
            }
          // fall through
          case 159: break;
          case 50:
            { return SHIFT_LEFT;
            }
          // fall through
          case 160: break;
          case 51:
            { return LESS_OR_EQUAL;
            }
          // fall through
          case 161: break;
          case 52:
            { return EQ;
            }
          // fall through
          case 162: break;
          case 53:
            { return GREATER_OR_EQUAL;
            }
          // fall through
          case 163: break;
          case 54:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 164: break;
          case 55:
            { return BIT_XOR_ASSIGN;
            }
          // fall through
          case 165: break;
          case 56:
            { return AS ;
            }
          // fall through
          case 166: break;
          case 57:
            { return DO;
            }
          // fall through
          case 167: break;
          case 58:
            { return IF;
            }
          // fall through
          case 168: break;
          case 59:
            { return IN;
            }
          // fall through
          case 169: break;
          case 60:
            { return BIT_OR_ASSIGN;
            }
          // fall through
          case 170: break;
          case 61:
            { return COND_OR;
            }
          // fall through
          case 171: break;
          case 62:
            { return STRING_ESCAPE_ENTRY;
            }
          // fall through
          case 172: break;
          case 63:
            { if (commentDepth > 0) {
            commentDepth--;
        } else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return MULTI_LINE_COMMENT;
        }
            }
          // fall through
          case 173: break;
          case 64:
            { commentDepth++;
            }
          // fall through
          case 174: break;
          case 65:
            { return BIT_CLEAR_ASSIGN;
            }
          // fall through
          case 175: break;
          case 66:
            { return LINE_COMMENT;
            }
          // fall through
          case 176: break;
          case 67:
            { return HEX;
            }
          // fall through
          case 177: break;
          case 68:
            { return BIN;
            }
          // fall through
          case 178: break;
          case 69:
            { return OCT;
            }
          // fall through
          case 179: break;
          case 70:
            { return SHIFT_LEFT_ASSIGN;
            }
          // fall through
          case 180: break;
          case 71:
            { return SHIFT_RIGHT_ASSIGN;
            }
          // fall through
          case 181: break;
          case 72:
            { return UNSIGNED_SHIFT_RIGHT;
            }
          // fall through
          case 182: break;
          case 73:
            { return FOR;
            }
          // fall through
          case 183: break;
          case 74:
            { return FUN;
            }
          // fall through
          case 184: break;
          case 75:
            { return LET;
            }
          // fall through
          case 185: break;
          case 76:
            { return MAP;
            }
          // fall through
          case 186: break;
          case 77:
            { return TRY;
            }
          // fall through
          case 187: break;
          case 78:
            { return MULTI_LINE_COMMENT;
            }
          // fall through
          case 188: break;
          case 79:
            { return UNSIGNED_SHIFT_RIGHT_ASSIGN;
            }
          // fall through
          case 189: break;
          case 80:
            { return ELSE;
            }
          // fall through
          case 190: break;
          case 81:
            { return NULL;
            }
          // fall through
          case 191: break;
          case 82:
            { return TRUE;
            }
          // fall through
          case 192: break;
          case 83:
            { return TYPE;
            }
          // fall through
          case 193: break;
          case 84:
            { return WITH;
            }
          // fall through
          case 194: break;
          case 85:
            { return CHAR;
            }
          // fall through
          case 195: break;
          case 86:
            { return CATCH;
            }
          // fall through
          case 196: break;
          case 87:
            { return CONST;
            }
          // fall through
          case 197: break;
          case 88:
            { return FALSE;
            }
          // fall through
          case 198: break;
          case 89:
            { return TRAIT;
            }
          // fall through
          case 199: break;
          case 90:
            { return UNTIL;
            }
          // fall through
          case 200: break;
          case 91:
            { return WHILE;
            }
          // fall through
          case 201: break;
          case 92:
            { return CODE_OF;
            }
          // fall through
          case 202: break;
          case 93:
            { return IMPORT ;
            }
          // fall through
          case 203: break;
          case 94:
            { return INIT_OF;
            }
          // fall through
          case 204: break;
          case 95:
            { return INLINE;
            }
          // fall through
          case 205: break;
          case 96:
            { return NATIVE;
            }
          // fall through
          case 206: break;
          case 97:
            { return REPEAT;
            }
          // fall through
          case 207: break;
          case 98:
            { return RETURN;
            }
          // fall through
          case 208: break;
          case 99:
            { return STRUCT;
            }
          // fall through
          case 209: break;
          case 100:
            { return EXTENDS;
            }
          // fall through
          case 210: break;
          case 101:
            { return FOREACH;
            }
          // fall through
          case 211: break;
          case 102:
            { return MESSAGE;
            }
          // fall through
          case 212: break;
          case 103:
            { return MUTATES;
            }
          // fall through
          case 213: break;
          case 104:
            { return RECEIVE;
            }
          // fall through
          case 214: break;
          case 105:
            { return VIRTUAL;
            }
          // fall through
          case 215: break;
          case 106:
            { return ABSTRACT;
            }
          // fall through
          case 216: break;
          case 107:
            { return CONTRACT;
            }
          // fall through
          case 217: break;
          case 108:
            { return EXTERNAL;
            }
          // fall through
          case 218: break;
          case 109:
            { return OVERRIDE;
            }
          // fall through
          case 219: break;
          case 110:
            { return PRIMITIVE;
            }
          // fall through
          case 220: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
